user nginx;
worker_processes auto;

error_log  /dev/stderr info;
pid /tmp/nginx.pid;

events {
  worker_connections 1024;
}


http {
  proxy_cache_path /tmp/nginx-cache keys_zone=auth_cache:10m;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  map "$time_iso8601 # $msec" $time_iso8601_ms {
   "~(^.+)-0[78]:00 # \d+\.(\d+)$" $1,$2;
  }
  log_format main '$http_x_forwarded_for - $remote_user "$time_iso8601_ms" "$request" '
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent"';
  access_log /dev/stdout main;

  sendfile on;
  tcp_nopush on;

  server {
    listen 443 ssl http2;
    server_name localhost;
    client_max_body_size 100M;
    client_header_timeout 305s;
    client_body_timeout 305s;
    keepalive_timeout 305s;

    # Don't send the nginx version number in error pages or the Server header.
    server_tokens off;

    ssl_certificate /certs/localhost.crt;
    ssl_certificate_key /certs/localhost.key;

    # Enable session resumption to improve https performance from the ALB to the
    # app server. This turns on both session ID caching and session tickets,
    # though I'm not actually sure the caching is needed. It shouldn't hurt,
    # though.  ALBs support this:
    # https://aws.amazon.com/premiumsupport/knowledge-center/elb-ssl-tls-session-resumption-support/
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets on;
    # Enable HTTP Strict Transport Security. This causes the browser to ONLY
    # ever try to access the domain over https once its established a secure
    # connection at least once. It won't even attempt http again until max-age
    # number of seconds have passed since the last https request. The suggested
    # max-age is 63072000, which is 2 years.  This is a bit redundant, since
    # none of our apps are served over http anyway (the ALB auto-redirects to
    # https).  But it's a best practice, and security auditors will complain if
    # you don't offer it.
    add_header Strict-Transport-Security "max-age=63072000";
    # If an XSS attack is detected by the browser, this prevents the page from
    # being rendered at all. Most browsers don't support this any more (they
    # expect the server to issue CSP headers), but some still do.
    add_header X-XSS-Protection "1; mode=block";

    # Disable the TRACE and TRACK methods.
    if ($request_method ~ ^(TRACE|TRACK)$ ) {
       return 405;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location / {
        auth_request /check-auth;
        root   /usr/share/nginx/html;
        index  index.html index.htm;

        # If the auth service returns a 401, redirect to the login page.
        error_page 401 =200 /auth/login?service=$request_uri;
    }

    location /auth {
        proxy_pass https://nginx_ldap_auth_service:8888/auth;
        proxy_set_header X-Cookie-Name "nginxauth";
        proxy_set_header X-Cookie-Domain "localhost";
        proxy_set_header X-Auth-Realm "Caltech Restricted";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /check-auth {
        internal;

        proxy_pass https://nginx_ldap_auth_service:8888/check;
        # Ensure that we don't pass the user's headers or request body to
        # the auth service.
        proxy_pass_request_headers off;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # We use the same auth service for managing the login and logout and
        # checking auth.  The SessionMiddleware, which is used for all requests,
        # will always be trying to set cookies even on our /check path.  Thus we
        # need to ignore the Set-Cookie header so that nginx will cache the
        # response.  Otherwise, it will think this is a dynamic page that
        # shouldn't be cached.
        proxy_ignore_headers "Set-Cookie";
        proxy_hide_header "Set-Cookie";

        # Cache our auth responses for 10 minutes so that we're not
        # hitting the auth service on every request.
        proxy_cache auth_cache;
        proxy_cache_valid 200 10m;

        proxy_set_header X-Cookie-Name "nginxauth";
        proxy_set_header X-Cookie-Domain "localhost";
        proxy_set_header Cookie nginxauth=$cookie_nginxauth;
        proxy_cache_key "$http_authorization$cookie_nginxauth";
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
  }
}

